"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[859],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),c=l(n),u=o,y=c["".concat(p,".").concat(u)]||c[u]||m[u]||r;return n?a.createElement(y,i(i({ref:t},s),{},{components:n})):a.createElement(y,i({ref:t},s))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=c;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4017:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={title:"Create",date:"2022-09-05 06:00:00 +0000",displayed_sidebar:"aws",sidebar_position:1},i="Create Todo",d={unversionedId:"aws-sam/todo-app/create-todo",id:"aws-sam/todo-app/create-todo",title:"Create",description:"Data structure",source:"@site/docs/aws-sam/03-todo-app/create-todo.mdx",sourceDirName:"aws-sam/03-todo-app",slug:"/aws-sam/todo-app/create-todo",permalink:"/tutorials/aws-sam/todo-app/create-todo",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Create",date:"2022-09-05 06:00:00 +0000",displayed_sidebar:"aws",sidebar_position:1},sidebar:"aws",previous:{title:"Todo app",permalink:"/tutorials/category/todo-app"},next:{title:"Read",permalink:"/tutorials/aws-sam/todo-app/read-todo"}},p={},l=[{value:"Data structure",id:"data-structure",level:2},{value:"Create Todo function",id:"create-todo-function",level:2},{value:"Api Gateway handler",id:"api-gateway-handler",level:2},{value:"Template.yaml",id:"templateyaml",level:2},{value:"Test",id:"test",level:2}],s={toc:l};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-todo"},"Create Todo"),(0,o.kt)("h2",{id:"data-structure"},"Data structure"),(0,o.kt)("p",null,"This data structure will have an ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," field for individually identifying each todo, a ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," field & a ",(0,o.kt)("inlineCode",{parentName:"p"},"description")," field for storing name and detail, and a ",(0,o.kt)("inlineCode",{parentName:"p"},"status")," field for tracking progress. Possible values of our status field are ",(0,o.kt)("inlineCode",{parentName:"p"},"todo"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"in-progress")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"done"),". A ",(0,o.kt)("inlineCode",{parentName:"p"},"createdAt")," field to store timestamp when a todo is created & ",(0,o.kt)("inlineCode",{parentName:"p"},"updatedAt")," to store timestamp when a todo is updated."),(0,o.kt)("p",null,"Here is our Todo interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Todo {\n  id: string;\n  name: string;\n  description: string;\n  status: 'todo' | 'in-progress' | 'done';\n  createdAt: string;\n  updatedAt: string;\n}\n")),(0,o.kt)("p",null,"While creating a todo we do not need all the information to be present. Therefore we also need to create one more type ",(0,o.kt)("inlineCode",{parentName:"p"},"CreateTodo")," with the help of the typescript ",(0,o.kt)("inlineCode",{parentName:"p"},"utility types"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type CreateTodo = Omit<Todo, 'id' | 'createdAt' | 'updatedAt'>;\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"create-todo-function"},"Create Todo function"),(0,o.kt)("p",null,"To store our todos we are going to use ",(0,o.kt)("inlineCode",{parentName:"p"},"DynamoDB"),". Let's define a function ",(0,o.kt)("inlineCode",{parentName:"p"},"createTodo"),", for storing todos in dynamodb and a utility function timeStamp."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"import dynamodb, { DocumentClient } from 'aws-sdk/clients/dynamodb';\nimport { randomUUID } from 'crypto';\n\nconst timeStamp = () => {\n  return Date().split(' (')[0];\n}\n\nconst createTodo = async (todo: CreateTodo): Promise<Todo> => {\n  const docClient = new dynamodb.DocumentClient();\n  const tableName = process.env.TODO_TABLE;\n  const id = randomUUID();\n  const item: Todo = {\n    id,\n    ...todo,\n    createdAt: timeStamp(),\n    updatedAt: timeStamp(),\n  }\n  const params: DocumentClient.PutItemInput = {\n    TableName: tableName,\n    Item: item\n  }\n  await docClient.put(params).promise();\n  return item;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createTodo")," function is very straightforward. We are creating the DynamoDB document client on ",(0,o.kt)("inlineCode",{parentName:"p"},"line 9"),", then we are calling the put method of the client on ",(0,o.kt)("inlineCode",{parentName:"p"},"line 22"),". The parameter for put method named params has TableName & Item property defined on ",(0,o.kt)("inlineCode",{parentName:"p"},"line 18"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createTodo")," function expecting only ",(0,o.kt)("inlineCode",{parentName:"p"},"name, description & status")," to be passed by the user and generates ",(0,o.kt)("inlineCode",{parentName:"p"},"id, createdAt & updatedAt")," on its own."),(0,o.kt)("admonition",{title:"tip",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"By default envs are of type ",(0,o.kt)("inlineCode",{parentName:"p"},"string | undefined"),". Therefore you might get type error. To resovlve this add below code to file ",(0,o.kt)("inlineCode",{parentName:"p"},"global.d.ts"),"."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"declare const process: {\n  env: Envs;\n}\n"))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"api-gateway-handler"},"Api Gateway handler"),(0,o.kt)("p",null,"To get user data we need to add a handler that can receive ",(0,o.kt)("inlineCode",{parentName:"p"},"APIGatewayProxyEvent")," and extract user data from it. for this purpose, let's add ",(0,o.kt)("inlineCode",{parentName:"p"},"createTodoHandler")," and a utility function ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonResponse")," to our code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const jsonResponse = (status: number, body: unknown): APIGatewayProxyResult => {\n  return {\n    statusCode: status,\n    body: JSON.stringify(body),\n  };\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonResponse")," function is just returning an object with ",(0,o.kt)("inlineCode",{parentName:"p"},"statuCode")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"body"),", which contains the response in string form which we want to send to the user. The return type of jsonResponse is a promise of ",(0,o.kt)("inlineCode",{parentName:"p"},"APIGatewayProxyResult")," type.\nReturn type of jsonResponse is of ",(0,o.kt)("inlineCode",{parentName:"p"},"APIGatewayProxyResult")," type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"export const createTodoHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n  console.log(\"createTodoHandler\", event);\n  let response: APIGatewayProxyResult;\n  try {\n    const todo: CreateTodo = JSON.parse(event.body || '{}');\n    const newTodo = await createTodo(todo);\n    response = jsonResponse(201, newTodo);\n  } catch (err) {\n    console.log(err);\n    response = {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: 'some error happened',\n      }),\n    };\n  }\n  return response;\n};\n")),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"createTodoHandler")," handler we are parsing ",(0,o.kt)("inlineCode",{parentName:"p"},"event.body")," and assigning it to const ",(0,o.kt)("inlineCode",{parentName:"p"},"todo"),", then passing it to ",(0,o.kt)("inlineCode",{parentName:"p"},"createTodo")," function at lines ",(0,o.kt)("inlineCode",{parentName:"p"},"5")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"6")," respectively. Function ",(0,o.kt)("inlineCode",{parentName:"p"},"createTodo")," return newly create ",(0,o.kt)("inlineCode",{parentName:"p"},"todo")," which contains ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"createdAt")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"updatedAt"),". After that handler functions return a jsonResponse to the API gateway."),(0,o.kt)("admonition",{title:"Tip",type:"info"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"All ",(0,o.kt)("strong",{parentName:"li"},"Handlers functions")," in this tutorial, should be exported. "),(0,o.kt)("li",{parentName:"ul"},"Complete code for creating todo can be found ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/VinitTomar/todo-aws-sam/blob/create-todo/src/app.ts"},"here"),"."))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"templateyaml"},"Template.yaml"),(0,o.kt)("p",null,"Now we have to configure our ",(0,o.kt)("inlineCode",{parentName:"p"},"createTodoHandler")," so that it can receive API gateway events. Add below code to ",(0,o.kt)("inlineCode",{parentName:"p"},"template.yaml")," under ",(0,o.kt)("inlineCode",{parentName:"p"},"Resources")," section."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"CreateTodoFunction:\n  Type: AWS::Serverless::Function\n  Properties:\n    CodeUri: dist/\n    Handler: app.createTodoHandler \n    Policies:\n      - DynamoDBCrudPolicy:\n          TableName: !Ref TodoTable\n    Environment:\n      Variables:\n        TODO_TABLE: !Ref TodoTable\n    Events:\n      Api:\n        Type: Api\n        Properties:\n          Path: /todos\n          Method: POST\n")),(0,o.kt)("p",null,"As you can see we have assigned our ",(0,o.kt)("inlineCode",{parentName:"p"},"createTodoHanlder")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Handler")," property of our ",(0,o.kt)("inlineCode",{parentName:"p"},"CreateTodoFunction")," function. We have also added ",(0,o.kt)("inlineCode",{parentName:"p"},"DynamoDBCrudPolicy"),", which enables our lambda function to perform CRUD operation on DynamoDB table ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoTable"),". We have also added the environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"TODO_TABLE")," which contains the name of our ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoTable"),". And we have also added an API event with properties path set to ",(0,o.kt)("inlineCode",{parentName:"p"},"/todos")," and method set to ",(0,o.kt)("inlineCode",{parentName:"p"},"POST"),"."),(0,o.kt)("p",null,"Now one last thing is remaining to configure a DynamoDB table. Add the below code to the",(0,o.kt)("inlineCode",{parentName:"p"},"template.yaml")," file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"TodoTable:\n  Type: AWS::Serverless::SimpleTable\n  Properties:\n    PrimaryKey:\n      Name: id\n      Type: String\n    ProvisionedThroughput:\n      ReadCapacityUnits: 2\n      WriteCapacityUnits: 2\n")),(0,o.kt)("p",null,"In this table, we only need to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"PrimaryKey")," property. DynamoDB is a document-based database, the remaining fields will be created automatically when we put new data in our table."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"test"},"Test"),(0,o.kt)("p",null,"Run command ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," and then ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy"),". You will see lambda function and DynamoDB table resources are being created automatically. After the deployment is successfully completed you can hit the ",(0,o.kt)("inlineCode",{parentName:"p"},"todo")," endpoint using postman with ",(0,o.kt)("inlineCode",{parentName:"p"},"POST http method")," to create a new Todo. If you get a successful response, then you can verify the same details in the DynamoDB table."))}m.isMDXComponent=!0}}]);