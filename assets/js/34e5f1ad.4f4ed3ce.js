"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[201],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(n),u=o,g=c["".concat(l,".").concat(u)]||c[u]||m[u]||r;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5065:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));const r={title:"Read",date:"2022-09-05 06:00:00 +0000",displayed_sidebar:"aws",sidebar_position:2},i="Fetch todos",s={unversionedId:"aws-sam/todo-app/read-todo",id:"aws-sam/todo-app/read-todo",title:"Read",description:"Get all",source:"@site/docs/aws-sam/03-todo-app/read-todo.mdx",sourceDirName:"aws-sam/03-todo-app",slug:"/aws-sam/todo-app/read-todo",permalink:"/tutorials/aws-sam/todo-app/read-todo",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Read",date:"2022-09-05 06:00:00 +0000",displayed_sidebar:"aws",sidebar_position:2},sidebar:"aws",previous:{title:"Create",permalink:"/tutorials/aws-sam/todo-app/create-todo"},next:{title:"Update",permalink:"/tutorials/aws-sam/todo-app/update-todo"}},l={},d=[{value:"Get all",id:"get-all",level:2},{value:"Api gateway handler",id:"api-gateway-handler",level:3},{value:"Sam template configuration",id:"sam-template-configuration",level:3},{value:"Get by id",id:"get-by-id",level:2},{value:"Api gateway handler",id:"api-gateway-handler-1",level:3},{value:"Sam template configuration",id:"sam-template-configuration-1",level:3},{value:"Test",id:"test",level:2}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fetch-todos"},"Fetch todos"),(0,o.kt)("h2",{id:"get-all"},"Get all"),(0,o.kt)("p",null,"To get all todos we have created, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"scan")," method of the DynamoDB client. Let's add a function ",(0,o.kt)("inlineCode",{parentName:"p"},"getAllTodos")," to get all todos inside an array."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"const docClient = new dynamodb.DocumentClient();\nconst tableName = process.env.TODO_TABLE;\n\nconst getAllTodos = async (): Promise<Todo[]> => {\n  const params: DocumentClient.ScanInput = {\n    TableName: tableName,\n  }\n\n  const data = await docClient.scan(params).promise();\n  const list: Todo[] = <[]>data.Items;\n  return list;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Scan")," method requires only the ",(0,o.kt)("inlineCode",{parentName:"p"},"TableName")," parameter to get all the records from our table. Then we can extract our todos from ",(0,o.kt)("inlineCode",{parentName:"p"},"data.Items")," and return the result."),(0,o.kt)("h3",{id:"api-gateway-handler"},"Api gateway handler"),(0,o.kt)("p",null,"Now add an API Gateway event handler for our ",(0,o.kt)("inlineCode",{parentName:"p"},"getAllTodos")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},'export const getTodoListHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n  console.log("getTodoListHandler", event);\n  let response: APIGatewayProxyResult;\n  try {\n    const allTodo = await getAllTodos();\n    console.log("getTodoListHandler", { allTodo });\n    response = jsonResponse(200, allTodo);\n  } catch (err) {\n    console.log(err);\n    response = {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \'some error happened\',\n      }),\n    };\n  }\n  return response;\n};\n')),(0,o.kt)("p",null,"Our handler code is pretty self explanatory. We are calling ",(0,o.kt)("inlineCode",{parentName:"p"},"getAllTodos()")," method and return todos list as ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonResponse"),"."),(0,o.kt)("h3",{id:"sam-template-configuration"},"Sam template configuration"),(0,o.kt)("p",null,"Let's configure our API gateway handler in ",(0,o.kt)("inlineCode",{parentName:"p"},"template.yaml"),". Add ",(0,o.kt)("inlineCode",{parentName:"p"},"GetTodosFunction")," under ",(0,o.kt)("strong",{parentName:"p"},"Resources")," section."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"showLineNumbers",showLineNumbers:!0},"GetTodosFunction:\n  Type: AWS::Serverless::Function\n  Properties:\n    CodeUri: dist/\n    Handler: app.getTodoListHandler\n    Policies:\n      - DynamoDBCrudPolicy:\n          TableName: !Ref TodoTable\n    Environment:\n      Variables:\n        TODO_TABLE: !Ref TodoTable\n    Events:\n      GetTodos:\n        Type: Api\n        Properties:\n          Path: /todos\n          Method: get\n")),(0,o.kt)("p",null,"We are assigning ",(0,o.kt)("inlineCode",{parentName:"p"},"getTodoListHandler")," to the handler property. And we have also added an API event with properties path set to ",(0,o.kt)("inlineCode",{parentName:"p"},"/todos")," and method set to ",(0,o.kt)("inlineCode",{parentName:"p"},"get"),". Policies and environment Variables are the same as ",(0,o.kt)("strong",{parentName:"p"},"CreateTodoFunction")," function."),(0,o.kt)("admonition",{title:"Tip",type:"info"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"All ",(0,o.kt)("strong",{parentName:"li"},"Handlers functions")," should be exported. "),(0,o.kt)("li",{parentName:"ul"},"Complete code for listing todo can be found ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/VinitTomar/todo-aws-sam/tree/create-todo"},"here"),"."))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"get-by-id"},"Get by id"),(0,o.kt)("p",null,"Now we are able to fetch a list of all our todos. What about fetching a single todo? We are having ",(0,o.kt)("strong",{parentName:"p"},'"id"')," property for individually identifying each todo therefore we can use it to fetch a single todo. Let's add a ",(0,o.kt)("inlineCode",{parentName:"p"},"getTodoById")," function to get a todo by its id."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"const docClient = new dynamodb.DocumentClient();\nconst tableName = process.env.TODO_TABLE;\n\nconst getTodoById = async (id: string): Promise<Todo> => {\n  const params: DocumentClient.GetItemInput = {\n    TableName: tableName,\n    Key: {\n      id\n    }\n  };\n  const data = await docClient.get(params).promise();\n  const todo: Todo = <any>data.Item;\n  return todo;\n}\n")),(0,o.kt)("p",null,"To get a single todo we are using ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," method of ",(0,o.kt)("inlineCode",{parentName:"p"},"docClient")," object. Parameters for the ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," method are ",(0,o.kt)("inlineCode",{parentName:"p"},"TableName")," and an object assigned to ",(0,o.kt)("inlineCode",{parentName:"p"},"Key")," which has todo's ",(0,o.kt)("strong",{parentName:"p"},'"id"'),". "),(0,o.kt)("h3",{id:"api-gateway-handler-1"},"Api gateway handler"),(0,o.kt)("p",null,"Now add the API gateway handler for ",(0,o.kt)("inlineCode",{parentName:"p"},"getTodoById")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"export const getTodoByIdHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n  console.log(\"getTodoByIdHandler\", event);\n  let response: APIGatewayProxyResult;\n  try {\n    const todo = await getTodoById(event.pathParameters?.id || '');\n    response = jsonResponse(200, todo);\n  } catch (err) {\n    console.log(err);\n    response = {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: 'some error happened',\n      }),\n    };\n  }\n  return response;\n}\n")),(0,o.kt)("p",null,"Our handle is extracting todo's ",(0,o.kt)("strong",{parentName:"p"},"id")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"event.pathParametets")," and passing it to ",(0,o.kt)("inlineCode",{parentName:"p"},"getTodoById")," function. ",(0,o.kt)("inlineCode",{parentName:"p"},"getTodoById")," function is returning a todo corresponding to the ",(0,o.kt)("strong",{parentName:"p"},"id")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"event.pathParameters"),". Then we are sending this todo to the client as ",(0,o.kt)("strong",{parentName:"p"},"jsonResponse"),"."),(0,o.kt)("h3",{id:"sam-template-configuration-1"},"Sam template configuration"),(0,o.kt)("p",null,"Lets add a serverless function to our ",(0,o.kt)("strong",{parentName:"p"},"template.yaml")," for handling API gateway event for ",(0,o.kt)("inlineCode",{parentName:"p"},"getTodoByIdHandler"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"showLineNumbers",showLineNumbers:!0},"GetTodoByIdFunction:\n  Type: AWS::Serverless::Function\n  Properties:\n    CodeUri: dist/\n    Handler: app.getTodoByIdHandler\n    Policies:\n      - DynamoDBCrudPolicy:\n          TableName: !Ref TodoTable\n    Environment:\n      Variables:\n        TODO_TABLE: !Ref TodoTable\n    Events:\n      GetTodoById:\n        Type: Api\n        Properties:\n          Path: /todos/{id}\n          Method: get\n")),(0,o.kt)("p",null,"Look at the ",(0,o.kt)("strong",{parentName:"p"},"Path")," property of the API gateway event on ",(0,o.kt)("inlineCode",{parentName:"p"},"line 16"),". This is where we are adding our path parameter."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"test"},"Test"),(0,o.kt)("p",null,"Build and deploy your application. You will see our lambda functions are being created. After the deployment is completed, hit ",(0,o.kt)("inlineCode",{parentName:"p"},"todos")," endpoint by postman with ",(0,o.kt)("inlineCode",{parentName:"p"},"GET http method")," and you will receive an array of todos you have created. Copy ",(0,o.kt)("strong",{parentName:"p"},"id")," of any todo from this list and hit ",(0,o.kt)("inlineCode",{parentName:"p"},"todos/<copied_todo_id>")," to get a single todo detail."))}m.isMDXComponent=!0}}]);