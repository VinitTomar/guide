"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[925],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=o.createContext({}),l=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(n),u=a,g=c["".concat(d,".").concat(u)]||c[u]||m[u]||r;return n?o.createElement(g,s(s({ref:t},p),{},{components:n})):o.createElement(g,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=c;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9510:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const r={title:"Read",date:"2022-09-05 06:00:00 +0000",displayed_sidebar:"aws",sidebar_position:2},s="Fetch todos",i={unversionedId:"aws-sam/todo-app/read-todo",id:"aws-sam/todo-app/read-todo",title:"Read",description:"Get all",source:"@site/docs/aws-sam/todo-app/read-todo.mdx",sourceDirName:"aws-sam/todo-app",slug:"/aws-sam/todo-app/read-todo",permalink:"/tutorials/aws-sam/todo-app/read-todo",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Read",date:"2022-09-05 06:00:00 +0000",displayed_sidebar:"aws",sidebar_position:2},sidebar:"aws",previous:{title:"Create",permalink:"/tutorials/aws-sam/todo-app/create-todo"},next:{title:"Update",permalink:"/tutorials/aws-sam/todo-app/update-todo"}},d={},l=[{value:"Get all",id:"get-all",level:2},{value:"Get by id",id:"get-by-id",level:2},{value:"Test",id:"test",level:2}],p={toc:l};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"fetch-todos"},"Fetch todos"),(0,a.kt)("h2",{id:"get-all"},"Get all"),(0,a.kt)("p",null,"To get all todos we have created, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"scan")," method of the DyanmoDB client. Let's add a function ",(0,a.kt)("inlineCode",{parentName:"p"},"getAllTodos")," to get all todos inside an array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"const docClient = new dynamodb.DocumentClient();\nconst tableName = process.env.TODO_TABLE;\n\nconst getAllTodos = async (): Promise<Todo[]> => {\n  const params: DocumentClient.ScanInput = {\n    TableName: tableName,\n  }\n\n  const data = await docClient.scan(params).promise();\n  const list: Todo[] = <[]>data.Items;\n  return list;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Scan")," method requires only the ",(0,a.kt)("inlineCode",{parentName:"p"},"TableName")," parameter to get all the records from our table. Then we can extract our todos from ",(0,a.kt)("inlineCode",{parentName:"p"},"data.Items")," and return the result."),(0,a.kt)("p",null,"Now add an API Gateway event handler for our ",(0,a.kt)("inlineCode",{parentName:"p"},"getAllTodos")," function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},'export const getTodoListHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n  console.log("getTodoListHandler", event);\n  let response: APIGatewayProxyResult;\n  try {\n    const allTodo = await getAllTodos();\n    console.log("getTodoListHandler", { allTodo });\n    response = jsonResponse(200, allTodo);\n  } catch (err) {\n    console.log(err);\n    response = {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \'some error happened\',\n      }),\n    };\n  }\n  return response;\n};\n')),(0,a.kt)("p",null,"Our handler code is pretty self explanatory. We are calling ",(0,a.kt)("inlineCode",{parentName:"p"},"getAllTodos()")," method and return todos list as ",(0,a.kt)("inlineCode",{parentName:"p"},"jsonResponse"),"."),(0,a.kt)("p",null,"Let's configure our API gateway handler in ",(0,a.kt)("inlineCode",{parentName:"p"},"template.yaml"),". Add ",(0,a.kt)("inlineCode",{parentName:"p"},"GetTodosFunction")," under ",(0,a.kt)("strong",{parentName:"p"},"Resources")," section."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"showLineNumbers",showLineNumbers:!0},"GetTodosFunction:\n  Type: AWS::Serverless::Function\n  Properties:\n    CodeUri: dist/\n    Handler: app.getTodoListHandler\n    Policies:\n      - DynamoDBCrudPolicy:\n          TableName: !Ref TodoTable\n    Environment:\n      Variables:\n        TODO_TABLE: !Ref TodoTable\n    Events:\n      GetTodos:\n        Type: Api\n        Properties:\n          Path: /todos\n          Method: get\n")),(0,a.kt)("p",null,"We are assigning ",(0,a.kt)("inlineCode",{parentName:"p"},"getTodoListHandler")," to the handler property. And we have also added an API event with properties path set to ",(0,a.kt)("inlineCode",{parentName:"p"},"/todos")," and method set to ",(0,a.kt)("inlineCode",{parentName:"p"},"get"),". Policies and environment Variables are the same as ",(0,a.kt)("strong",{parentName:"p"},"CreateTodoFunction")," function."),(0,a.kt)("admonition",{title:"Tip",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"All ",(0,a.kt)("strong",{parentName:"li"},"Handlers functions")," should be exported. "),(0,a.kt)("li",{parentName:"ul"},"Complete code for listing todo can be found ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/VinitTomar/todo-aws-sam/tree/create-todo"},"here"),"."))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"get-by-id"},"Get by id"),(0,a.kt)("p",null,"Now we are able to fetch a list of all our todos. What about fetching a single todo? We are having ",(0,a.kt)("strong",{parentName:"p"},'"id"')," property for individually identifying each todo therefore we can use it to fetch a single todo. Let's add a ",(0,a.kt)("inlineCode",{parentName:"p"},"getTodoById")," function to get a todo by its id."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"const docClient = new dynamodb.DocumentClient();\nconst tableName = process.env.TODO_TABLE;\n\nconst getTodoById = async (id: string): Promise<Todo> => {\n  const params: DocumentClient.GetItemInput = {\n    TableName: tableName,\n    Key: {\n      id\n    }\n  };\n  const data = await docClient.get(params).promise();\n  const todo: Todo = <any>data.Item;\n  return todo;\n}\n")),(0,a.kt)("p",null,"To get a single todo we are using ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," method of ",(0,a.kt)("inlineCode",{parentName:"p"},"docClient")," object. Parameters for the ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," method are ",(0,a.kt)("inlineCode",{parentName:"p"},"TableName")," and an object assigned to ",(0,a.kt)("inlineCode",{parentName:"p"},"Key")," which has todo's ",(0,a.kt)("strong",{parentName:"p"},'"id"'),". Now add the API gateway handler for ",(0,a.kt)("inlineCode",{parentName:"p"},"getTodoById")," function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"export const getTodoByIdHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n  console.log(\"getTodoByIdHandler\", event);\n  let response: APIGatewayProxyResult;\n  try {\n    const todo = await getTodoById(event.pathParameters?.id || '');\n    response = jsonResponse(200, todo);\n  } catch (err) {\n    console.log(err);\n    response = {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: 'some error happened',\n      }),\n    };\n  }\n  return response;\n}\n")),(0,a.kt)("p",null,"Our handle is extracting todo's ",(0,a.kt)("strong",{parentName:"p"},"id")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"event.pathParametets")," and passing it to ",(0,a.kt)("inlineCode",{parentName:"p"},"getTodoById")," function. ",(0,a.kt)("inlineCode",{parentName:"p"},"getTodoById")," function is returning a todo corresponding to the ",(0,a.kt)("strong",{parentName:"p"},"id")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"event.pathParameters"),". Then we are sending this todo to the client as ",(0,a.kt)("strong",{parentName:"p"},"jsonResponse"),"."),(0,a.kt)("p",null,"Lets add a serverless function to our ",(0,a.kt)("strong",{parentName:"p"},"template.yaml")," for handling API gateway event for ",(0,a.kt)("inlineCode",{parentName:"p"},"getTodoByIdHandler"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"showLineNumbers",showLineNumbers:!0},"GetTodoByIdFunction:\n  Type: AWS::Serverless::Function\n  Properties:\n    CodeUri: dist/\n    Handler: app.getTodoByIdHandler\n    Policies:\n      - DynamoDBCrudPolicy:\n          TableName: !Ref TodoTable\n    Environment:\n      Variables:\n        TODO_TABLE: !Ref TodoTable\n    Events:\n      GetTodoById:\n        Type: Api\n        Properties:\n          Path: /todos/{id}\n          Method: get\n")),(0,a.kt)("p",null,"Look at the ",(0,a.kt)("strong",{parentName:"p"},"Path")," property of the API gateway event on ",(0,a.kt)("inlineCode",{parentName:"p"},"line 16"),". This is where we are adding our path parameter."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"test"},"Test"),(0,a.kt)("p",null,"Build and deploy your application. You will see our lambda functions are being created. After the deployment is completed, hit ",(0,a.kt)("inlineCode",{parentName:"p"},"todos")," endpoint by postman with ",(0,a.kt)("inlineCode",{parentName:"p"},"GET http method")," and you will receive an array of todos you have created. Copy ",(0,a.kt)("strong",{parentName:"p"},"id")," of any todo from this list and hit ",(0,a.kt)("inlineCode",{parentName:"p"},"todos/<copied_todo_id>")," to get a single todo detail."))}m.isMDXComponent=!0}}]);