"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[881],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),c=r,k=u["".concat(s,".").concat(c)]||u[c]||d[c]||o;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3074:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const o={title:"Items",displayed_sidebar:"dynamodb"},i=void 0,l={unversionedId:"dynamo-db/items",id:"dynamo-db/items",title:"Items",description:"For this tutorial we are going to use a table named ProductCatalog. This table only has simple primary key. Attribute used for primary key is Id of type number(N). As dynamodb is schemaless, we can add other attributes according to our need. However we will uese these attributes most frequently.",source:"@site/docs/dynamo-db/06-items.md",sourceDirName:"dynamo-db",slug:"/dynamo-db/items",permalink:"/tutorials/dynamo-db/items",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Items",displayed_sidebar:"dynamodb"},sidebar:"dynamodb",previous:{title:"Data types",permalink:"/tutorials/dynamo-db/data-types"}},s={},m=[{value:"CRUD operations",id:"crud-operations",level:2},{value:"PutItem",id:"putitem",level:3},{value:"GetItem",id:"getitem",level:3},{value:"UpdateItem",id:"updateitem",level:3},{value:"DeleteItem",id:"deleteitem",level:3},{value:"ReturnValues",id:"returnvalues",level:2},{value:"Batch operations",id:"batch-operations",level:2},{value:"Atomic operations",id:"atomic-operations",level:2},{value:"Conditional writes",id:"conditional-writes",level:2},{value:"ReturnConsumedCapacity",id:"returnconsumedcapacity",level:2}],p={toc:m};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"For this tutorial we are going to use a table named ",(0,r.kt)("strong",{parentName:"p"},"ProductCatalog"),". This table only has simple primary key. Attribute used for primary key is ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," of type number(N). As dynamodb is schemaless, we can add other attributes according to our need. However we will uese these attributes most frequently."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Id"),(0,r.kt)("li",{parentName:"ul"},"Brand"),(0,r.kt)("li",{parentName:"ul"},"Product"),(0,r.kt)("li",{parentName:"ul"},"Color"),(0,r.kt)("li",{parentName:"ul"},"Price")),(0,r.kt)("h2",{id:"crud-operations"},"CRUD operations"),(0,r.kt)("p",null,"An item is a collection of attributes and each attributes has a name & value. Dynamodb provides these atomic operations to perfom CRUD operations on a item."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"PutItem"),(0,r.kt)("li",{parentName:"ul"},"GetItem"),(0,r.kt)("li",{parentName:"ul"},"UpdateItem"),(0,r.kt)("li",{parentName:"ul"},"DeleteItem\nEach of these operations requires a primary key for item on which you want to work.")),(0,r.kt)("h3",{id:"putitem"},"PutItem"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PutItem")," operation creates new item if an item with the same key does not exist. Otherwise old item is replaced with the new item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\nimport { DynamoDBDocumentClient, PutCommand } from \"@aws-sdk/lib-dynamodb\";\n\nconst docClient = DynamoDBDocumentClient.from(\n  new DynamoDBClient({\n    endpoint: 'http://localhost:8000'\n  })\n);\n\nasync function putItem() {\n  const command = new PutCommand({\n    TableName: 'ProductCatalog',\n    Item: {\n      Id: 505,\n      Brand: 'Brand A',\n      Product: 'Flagship product A',\n      Color: 'Saffron',\n      Price: 4000\n    }\n    ConditionExpression: 'attribute_not_exists(Id)',\n  });\n\n  const result = await docClient.send(command);\n  console.log(result);\n}\n\nputItem();\n")),(0,r.kt)("admonition",{title:"Tip",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"We can prevent replacement of old item by using ",(0,r.kt)("inlineCode",{parentName:"p"},"ConditionExpression: 'attribute_not_exists(Id)'"),".")),(0,r.kt)("h3",{id:"getitem"},"GetItem"),(0,r.kt)("p",null,"To get an item form dynamodb, we need to specify the complete primary key for ",(0,r.kt)("inlineCode",{parentName:"p"},"GetItem")," operation.\nThis operation gives eventually consistent value by default. However we can request strongly consisten value using ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsistentRead")," paramter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"async function getItem() {\n  const command = new GetCommand({\n    TableName: 'ProductCatalog',\n    Key: {\n      Id: 505\n    },\n    ConsistentRead: true,\n  });\n  const result = await docClient.send(command);\n  console.log(result);\n}\n\ngetItem();\n")),(0,r.kt)("admonition",{title:"Tip",type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"ConsistentRead")," is false by default. Set this parameter to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," for requesting strongly consistent value.")),(0,r.kt)("h3",{id:"updateitem"},"UpdateItem"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UpdateItem")," operation is used to modify attributes of an existing item for a given primay key.\nIf an item does not exist of that key, then a new element is created. This operations performs kind of ",(0,r.kt)("inlineCode",{parentName:"p"},"upsert")," operation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"async function updateItem() {\n  const id = 505;\n\n  const command = new UpdateCommand({\n    TableName: 'ProductCatalog',\n    Key: {\n      Id: id\n    },\n    ReturnValues: `ALL_NEW`,\n    UpdateExpression: 'Set Brand = :brand, Price = :price',\n    ConditionExpression: 'Id = :id',\n    ExpressionAttributeValues: {\n      ':brand': 'Brand A6 updated',\n      ':price': 5500,\n      ':id': id\n    },\n  });\n\n  const result = await docClient.send(command);\n  console.log(result);\n}\n\nupdateItem();\n")),(0,r.kt)("admonition",{title:"Tip",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"We can prevent creation of new item by using ",(0,r.kt)("inlineCode",{parentName:"p"},"ConditionExpression: 'Id = :id'"),".")),(0,r.kt)("h3",{id:"deleteitem"},"DeleteItem"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DeleteItem")," operation deletes an item with the specified key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"async function deleteItem() {\n  const command = new DeleteCommand({\n    TableName: 'ProductCatalog',\n    Key: {\n      Id: 605\n    },\n  });\n\n  const result = await docClient.send(command);\n  console.log(result);\n}\n\ndeleteItem();\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"returnvalues"},"ReturnValues"),(0,r.kt)("p",null,"When we want dynamodb to return some attributes before or after a modification, we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"ReturnValues")," with put, update & delete operations. As we have used ",(0,r.kt)("inlineCode",{parentName:"p"},"ReturnValues")," in ",(0,r.kt)("strong",{parentName:"p"},"UpdateCommand"),", we can use it in similar way with ",(0,r.kt)("strong",{parentName:"p"},"PutCommand")," & ",(0,r.kt)("strong",{parentName:"p"},"DeleteCommand")," also. Here is the list of all possible values supported by ",(0,r.kt)("inlineCode",{parentName:"p"},"ReturnValues")," attribute."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operations"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Supported values"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Put"),(0,r.kt)("td",{parentName:"tr",align:"center"},"NONE, ALL_OLD")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Update"),(0,r.kt)("td",{parentName:"tr",align:"center"},"NONE, ALL_OLD, ALL_NEW, UPDATED_OLD, UPDATED_NEW")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Delete"),(0,r.kt)("td",{parentName:"tr",align:"center"},"NONE, ALL_OLD")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ALL_OLD"),": Return the entire item as it appeared before modification."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ALL_NEW"),": Return the entire item as it appears after modification."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"UPDATED_OLD"),": Return the only affected attributes as they appeared before modification."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"UPDATED_NEW"),": Return the only affected attributes as they appears after the modification.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"batch-operations"},"Batch operations"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"atomic-operations"},"Atomic operations"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"conditional-writes"},"Conditional writes"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"returnconsumedcapacity"},"ReturnConsumedCapacity"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Document operations (get, put, update, query, scan, delete ","[ TTL ]",", conditional update, batch operations)\nExpressions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update expression"),(0,r.kt)("li",{parentName:"ul"},"Expression attribute values"),(0,r.kt)("li",{parentName:"ul"},"Project expression"),(0,r.kt)("li",{parentName:"ul"},"conditional expression & conditional operator, then atomic counter & conditional writes\nUsing expression, projection, conditional expressoin etc.\n",(0,r.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html"},"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html"))))}d.isMDXComponent=!0}}]);