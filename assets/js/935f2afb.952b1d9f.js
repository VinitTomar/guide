"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"aws":[{"type":"link","label":"Introduction","href":"/tutorials/aws-sam/","docId":"aws-sam/index"},{"type":"link","label":"Setup","href":"/tutorials/aws-sam/setup-for-typescript","docId":"aws-sam/setup-for-typescript"},{"type":"category","label":"Todo app","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Create","href":"/tutorials/aws-sam/todo-app/create-todo","docId":"aws-sam/todo-app/create-todo"},{"type":"link","label":"Read","href":"/tutorials/aws-sam/todo-app/read-todo","docId":"aws-sam/todo-app/read-todo"},{"type":"link","label":"Update","href":"/tutorials/aws-sam/todo-app/update-todo","docId":"aws-sam/todo-app/update-todo"},{"type":"link","label":"Delete","href":"/tutorials/aws-sam/todo-app/delete-todo","docId":"aws-sam/todo-app/delete-todo"}],"href":"/tutorials/category/todo-app"},{"type":"link","label":"Lambda layers","href":"/tutorials/aws-sam/lambda-layers","docId":"aws-sam/lambda-layers"}],"dynamodb":[{"type":"link","label":"Introduction","href":"/tutorials/dynamo-db/","docId":"dynamo-db/index"},{"type":"link","label":"Setup","href":"/tutorials/dynamo-db/setup","docId":"dynamo-db/setup"},{"type":"link","label":"Tables","href":"/tutorials/dynamo-db/table","docId":"dynamo-db/table"},{"type":"link","label":"Primary Key","href":"/tutorials/dynamo-db/primary-key","docId":"dynamo-db/primary-key"},{"type":"link","label":"Data types","href":"/tutorials/dynamo-db/data-types","docId":"dynamo-db/data-types"},{"type":"link","label":"Items","href":"/tutorials/dynamo-db/items","docId":"dynamo-db/items"}]},"docs":{"aws-sam/api-gateway":{"id":"aws-sam/api-gateway","title":"API Gateway","description":"","sidebar":"aws"},"aws-sam/authorizers":{"id":"aws-sam/authorizers","title":"Authorizers","description":"","sidebar":"aws"},"aws-sam/dynamo-db":{"id":"aws-sam/dynamo-db","title":"DynamoDB","description":"","sidebar":"aws"},"aws-sam/event-bridge":{"id":"aws-sam/event-bridge","title":"Event Bridge","description":"","sidebar":"aws"},"aws-sam/index":{"id":"aws-sam/index","title":"Introduction","description":"SAM is serverless application model for AWS for running serverless applications. With the help of SAM, we can create serverless applications declaratively. SAM uses a file commonly named as template.yaml to get the information about the AWS services required for our serverless application. File template.yaml has different sections for different purpose but the most important is the Resources section. This is the place where we declare all AWS services required for our application.","sidebar":"aws"},"aws-sam/lambda-layers":{"id":"aws-sam/lambda-layers","title":"Lambda layers","description":"If you are using ZIP as a packaging system with your lambdas, you can use layers to share code & dependencies across teams in your organization. This tutorial will show how lambda handles layers in the node js environment and how we can create a layer with AWS SAM.","sidebar":"aws"},"aws-sam/middleware":{"id":"aws-sam/middleware","title":"Middleware","description":"","sidebar":"aws"},"aws-sam/setup-for-typescript":{"id":"aws-sam/setup-for-typescript","title":"Setup","description":"Install","sidebar":"aws"},"aws-sam/sns":{"id":"aws-sam/sns","title":"SNS","description":"","sidebar":"aws"},"aws-sam/sqs":{"id":"aws-sam/sqs","title":"SQS","description":"","sidebar":"aws"},"aws-sam/step-function":{"id":"aws-sam/step-function","title":"Step Functions","description":"","sidebar":"aws"},"aws-sam/todo-app/create-todo":{"id":"aws-sam/todo-app/create-todo","title":"Create","description":"Data structure","sidebar":"aws"},"aws-sam/todo-app/delete-todo":{"id":"aws-sam/todo-app/delete-todo","title":"Delete","description":"Delete a todo is very simple. We just have to pass the TableName and Key as the parameters to the docClient.delete(params) method. Let\'s add a deleteTodo function.","sidebar":"aws"},"aws-sam/todo-app/read-todo":{"id":"aws-sam/todo-app/read-todo","title":"Read","description":"Get all","sidebar":"aws"},"aws-sam/todo-app/update-todo":{"id":"aws-sam/todo-app/update-todo","title":"Update","description":"There are two ways in which we can update our todos. Either we can update all properties simultaneously or we can update some of the fields. By REST convention for updating all properties, we use the PUT HTTP method and for the partial update, we use the PATCH HTTP method.","sidebar":"aws"},"dynamo-db/data-types":{"id":"dynamo-db/data-types","title":"Data types","description":"While create a table we have assign \\"S\\" to AttributeType for AttributeDefinitions. Here \\"S\\" is for string data type. Dynamodb provies us three data types.","sidebar":"dynamodb"},"dynamo-db/index":{"id":"dynamo-db/index","title":"Introduction","description":"DynamoDB is a NoSQL database that comes under the category of those databases that stores data in the form of key-value pair. When we create a table in DynamoDB we have to specify only those attributes required for the primary key.","sidebar":"dynamodb"},"dynamo-db/items":{"id":"dynamo-db/items","title":"Items","description":"For this tutorial we are going to use a table named ProductCatalog. This table only has simple primary key. Attribute used for primary key is Id of type number(N). As dynamodb is schemaless, we can add other attributes according to our need. However we will uese these attributes most frequently.","sidebar":"dynamodb"},"dynamo-db/primary-key":{"id":"dynamo-db/primary-key","title":"Primary Key","description":"Like in sql databases, dynamodb also requires a key primary key to uniquely identify each item in a table. While creating a table it is required to specify a primary key. There are two types of primary key dynamodb support.","sidebar":"dynamodb"},"dynamo-db/setup":{"id":"dynamo-db/setup","title":"Setup","description":"There are two ways we can access DynamoDB. Either you can use it as an amazon web service or you can setup in your local system. For both ways, you should provide configure AWS credentials first. In the case of local system setup, there is no need for credentials to be real, you can use any fake credentails. However, for web services credentials should be real.","sidebar":"dynamodb"},"dynamo-db/table":{"id":"dynamo-db/table","title":"Tables","description":"Create a table","sidebar":"dynamodb"},"dynamo-db/transaction":{"id":"dynamo-db/transaction","title":"Transaction","description":"Transactions","sidebar":"dynamodb"},"index":{"id":"index","title":"Tutorial docs","description":"Welcome to Tutorial docs"}}}')}}]);